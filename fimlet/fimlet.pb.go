// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fimlet.proto

package fim

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type InotifyConfig struct {
	Pid                  int32    `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Paths                string   `protobuf:"bytes,2,opt,name=paths,proto3" json:"paths,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InotifyConfig) Reset()         { *m = InotifyConfig{} }
func (m *InotifyConfig) String() string { return proto.CompactTextString(m) }
func (*InotifyConfig) ProtoMessage()    {}
func (*InotifyConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_fimlet_30b24e97b1603ca1, []int{0}
}
func (m *InotifyConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InotifyConfig.Unmarshal(m, b)
}
func (m *InotifyConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InotifyConfig.Marshal(b, m, deterministic)
}
func (dst *InotifyConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InotifyConfig.Merge(dst, src)
}
func (m *InotifyConfig) XXX_Size() int {
	return xxx_messageInfo_InotifyConfig.Size(m)
}
func (m *InotifyConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_InotifyConfig.DiscardUnknown(m)
}

var xxx_messageInfo_InotifyConfig proto.InternalMessageInfo

func (m *InotifyConfig) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *InotifyConfig) GetPaths() string {
	if m != nil {
		return m.Paths
	}
	return ""
}

type WatchHandle struct {
	Uri                  string   `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchHandle) Reset()         { *m = WatchHandle{} }
func (m *WatchHandle) String() string { return proto.CompactTextString(m) }
func (*WatchHandle) ProtoMessage()    {}
func (*WatchHandle) Descriptor() ([]byte, []int) {
	return fileDescriptor_fimlet_30b24e97b1603ca1, []int{1}
}
func (m *WatchHandle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchHandle.Unmarshal(m, b)
}
func (m *WatchHandle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchHandle.Marshal(b, m, deterministic)
}
func (dst *WatchHandle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchHandle.Merge(dst, src)
}
func (m *WatchHandle) XXX_Size() int {
	return xxx_messageInfo_WatchHandle.Size(m)
}
func (m *WatchHandle) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchHandle.DiscardUnknown(m)
}

var xxx_messageInfo_WatchHandle proto.InternalMessageInfo

func (m *WatchHandle) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func init() {
	proto.RegisterType((*InotifyConfig)(nil), "fim.InotifyConfig")
	proto.RegisterType((*WatchHandle)(nil), "fim.WatchHandle")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FimletClient is the client API for Fimlet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FimletClient interface {
	NewWatch(ctx context.Context, in *InotifyConfig, opts ...grpc.CallOption) (*WatchHandle, error)
}

type fimletClient struct {
	cc *grpc.ClientConn
}

func NewFimletClient(cc *grpc.ClientConn) FimletClient {
	return &fimletClient{cc}
}

func (c *fimletClient) NewWatch(ctx context.Context, in *InotifyConfig, opts ...grpc.CallOption) (*WatchHandle, error) {
	out := new(WatchHandle)
	err := c.cc.Invoke(ctx, "/fim.Fimlet/NewWatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FimletServer is the server API for Fimlet service.
type FimletServer interface {
	NewWatch(context.Context, *InotifyConfig) (*WatchHandle, error)
}

func RegisterFimletServer(s *grpc.Server, srv FimletServer) {
	s.RegisterService(&_Fimlet_serviceDesc, srv)
}

func _Fimlet_NewWatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InotifyConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FimletServer).NewWatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fim.Fimlet/NewWatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FimletServer).NewWatch(ctx, req.(*InotifyConfig))
	}
	return interceptor(ctx, in, info, handler)
}

var _Fimlet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fim.Fimlet",
	HandlerType: (*FimletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewWatch",
			Handler:    _Fimlet_NewWatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fimlet.proto",
}

func init() { proto.RegisterFile("fimlet.proto", fileDescriptor_fimlet_30b24e97b1603ca1) }

var fileDescriptor_fimlet_30b24e97b1603ca1 = []byte{
	// 158 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xcb, 0xcc, 0xcd,
	0x49, 0x2d, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0xcb, 0xcc, 0x55, 0x32, 0xe7,
	0xe2, 0xf5, 0xcc, 0xcb, 0x2f, 0xc9, 0x4c, 0xab, 0x74, 0xce, 0xcf, 0x4b, 0xcb, 0x4c, 0x17, 0x12,
	0xe0, 0x62, 0x2e, 0xc8, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0d, 0x02, 0x31, 0x85, 0x44,
	0xb8, 0x58, 0x0b, 0x12, 0x4b, 0x32, 0x8a, 0x25, 0x98, 0x14, 0x18, 0x35, 0x38, 0x83, 0x20, 0x1c,
	0x25, 0x79, 0x2e, 0xee, 0xf0, 0xc4, 0x92, 0xe4, 0x0c, 0x8f, 0xc4, 0xbc, 0x94, 0x9c, 0x54, 0x90,
	0xb6, 0xd2, 0xa2, 0x4c, 0xb0, 0x36, 0xce, 0x20, 0x10, 0xd3, 0xc8, 0x86, 0x8b, 0xcd, 0x0d, 0x6c,
	0x9d, 0x90, 0x11, 0x17, 0x87, 0x5f, 0x6a, 0x39, 0x58, 0xb5, 0x90, 0x90, 0x5e, 0x5a, 0x66, 0xae,
	0x1e, 0x8a, 0x95, 0x52, 0x02, 0x60, 0x31, 0x24, 0xd3, 0x94, 0x18, 0x92, 0xd8, 0xc0, 0x6e, 0x34,
	0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x33, 0x00, 0x1a, 0xd3, 0xb3, 0x00, 0x00, 0x00,
}
