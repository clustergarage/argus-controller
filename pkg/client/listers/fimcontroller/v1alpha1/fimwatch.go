// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/clustergarage/fim-k8s/pkg/apis/fimcontroller/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FimWatchLister helps list FimWatches.
type FimWatchLister interface {
	// List lists all FimWatches in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.FimWatch, err error)
	// FimWatches returns an object that can list and get FimWatches.
	FimWatches(namespace string) FimWatchNamespaceLister
	FimWatchListerExpansion
}

// fimWatchLister implements the FimWatchLister interface.
type fimWatchLister struct {
	indexer cache.Indexer
}

// NewFimWatchLister returns a new FimWatchLister.
func NewFimWatchLister(indexer cache.Indexer) FimWatchLister {
	return &fimWatchLister{indexer: indexer}
}

// List lists all FimWatches in the indexer.
func (s *fimWatchLister) List(selector labels.Selector) (ret []*v1alpha1.FimWatch, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FimWatch))
	})
	return ret, err
}

// FimWatches returns an object that can list and get FimWatches.
func (s *fimWatchLister) FimWatches(namespace string) FimWatchNamespaceLister {
	return fimWatchNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FimWatchNamespaceLister helps list and get FimWatches.
type FimWatchNamespaceLister interface {
	// List lists all FimWatches in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.FimWatch, err error)
	// Get retrieves the FimWatch from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.FimWatch, error)
	FimWatchNamespaceListerExpansion
}

// fimWatchNamespaceLister implements the FimWatchNamespaceLister
// interface.
type fimWatchNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FimWatches in the indexer for a given namespace.
func (s fimWatchNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FimWatch, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FimWatch))
	})
	return ret, err
}

// Get retrieves the FimWatch from the indexer for a given namespace and name.
func (s fimWatchNamespaceLister) Get(name string) (*v1alpha1.FimWatch, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("fimwatch"), name)
	}
	return obj.(*v1alpha1.FimWatch), nil
}
