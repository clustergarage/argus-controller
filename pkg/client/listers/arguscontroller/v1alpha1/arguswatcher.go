// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "clustergarage.io/argus-controller/pkg/apis/arguscontroller/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ArgusWatcherLister helps list ArgusWatchers.
type ArgusWatcherLister interface {
	// List lists all ArgusWatchers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ArgusWatcher, err error)
	// ArgusWatchers returns an object that can list and get ArgusWatchers.
	ArgusWatchers(namespace string) ArgusWatcherNamespaceLister
	ArgusWatcherListerExpansion
}

// argusWatcherLister implements the ArgusWatcherLister interface.
type argusWatcherLister struct {
	indexer cache.Indexer
}

// NewArgusWatcherLister returns a new ArgusWatcherLister.
func NewArgusWatcherLister(indexer cache.Indexer) ArgusWatcherLister {
	return &argusWatcherLister{indexer: indexer}
}

// List lists all ArgusWatchers in the indexer.
func (s *argusWatcherLister) List(selector labels.Selector) (ret []*v1alpha1.ArgusWatcher, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ArgusWatcher))
	})
	return ret, err
}

// ArgusWatchers returns an object that can list and get ArgusWatchers.
func (s *argusWatcherLister) ArgusWatchers(namespace string) ArgusWatcherNamespaceLister {
	return argusWatcherNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ArgusWatcherNamespaceLister helps list and get ArgusWatchers.
type ArgusWatcherNamespaceLister interface {
	// List lists all ArgusWatchers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ArgusWatcher, err error)
	// Get retrieves the ArgusWatcher from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ArgusWatcher, error)
	ArgusWatcherNamespaceListerExpansion
}

// argusWatcherNamespaceLister implements the ArgusWatcherNamespaceLister
// interface.
type argusWatcherNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ArgusWatchers in the indexer for a given namespace.
func (s argusWatcherNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ArgusWatcher, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ArgusWatcher))
	})
	return ret, err
}

// Get retrieves the ArgusWatcher from the indexer for a given namespace and name.
func (s argusWatcherNamespaceLister) Get(name string) (*v1alpha1.ArgusWatcher, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("arguswatcher"), name)
	}
	return obj.(*v1alpha1.ArgusWatcher), nil
}
